#!/usr/bin/env python3

# List all events. Show the most recent in the top
# Toggles can be set at CLI but changed in a little prefs sheet also
# 

from argparse import Namespace

import rumps

from countdown import parser, process_events, Category, Event

# TODO: store future events in a separate menu
# or fix the glitch where more keep getting added!!

class CountdownMenubar(rumps.App):
    args: Namespace
    events: list[Event]

    def __init__(self, args: Namespace):
        super().__init__('Countdown')
        self.args = args
        self.events = []

        self.update_entries()
    
    def _show_entries(self, entries: list[Event]):
        # self._menu.clear()
        for e in entries:
            item = rumps.MenuItem(str(e))
            self._menu.add(item)
        # for i in self.footer_items:
        #     self._menu.add(i)

    @rumps.clicked("Reload")
    # @rumps.timer(3600)
    def update_entries(self, sender=None):
        events = process_events(self.args) or [None]
        assert not isinstance(events, dict)

        first, *remaining = events

        if first:
            self.title = str(first)
        else:
            self.title = 'No events!'

        self._show_entries(remaining)
    
    # @rumps.clicked("No filter")
    # def filter(self, sender):
    #     print(sender)
    #     sender.title = "AA"

    # footer_items = [
    #     update_entries,
    #     filter
    # ]

if __name__ == "__main__":
    args = parser.parse_args()
    CountdownMenubar(args).run()