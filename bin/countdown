#!/usr/bin/env python3
'''
Countdown date utility.
Mostly for my own use but feel free to hack around with it.

Requires `pip install rich`.

Takes some countdown text file with dates of the format

YYYY Mon DD Eventname

Comments of the form
# Category [richstyle]
are used to collate and format events.
'''

from dataclasses import dataclass
from os import system
from typing import Generator

from argparse import ArgumentParser
from datetime import date as Date, datetime as Datetime
from pathlib import Path
from sys import exit

try:
    from rich.console import Console
except:
    Console = None


@dataclass(frozen=True)
class Category:
    name: str = ''
    style: str = ''

    @classmethod
    def from_string(cls, string: str):
        name = string
        style = ''
        if '[' in string:
            name, style = string.split('[', 1)
            style = style.removesuffix(']')

        return cls(name.strip(), style.strip())

    def __str__(self):
        return '    ' + self.name

    def __rich__(self):
        return f'    [bold {self.style}]{self.name}'


@dataclass(frozen=True)
class Event:
    date: Date
    name: str
    category: Category

    def days_until(self):
        today = Date.today()
        return (e.date - today).days

    def __str__(self):
        return f'{self.days_until():>3} {self.name}'

    def __rich__(self):
        return f'[bold cyan]{self.days_until():>3}[/] [italic {self.category.style}]{self.name}[/]'


def get_events(filename: Path) -> Generator[Event, None, None]:
    with open(filename) as f:
        category = Category()
        for line in f:
            line = line.strip()
            if not line:
                continue

            if line.startswith('#'):
                if '[' in line:
                    category = Category.from_string(line.removeprefix('#'))
                continue

            y, m, d, name = line.split(' ', 3)
            yield Event(
                Datetime.strptime(f'{y} {m} {d}', '%Y %b %d').date(),
                name,
                category)


parser = ArgumentParser()
parser.add_argument(
    'file',
    help="The file to parse."
    " Each line should take the form 'YYYY Mon DD Eventname'.")

parser.add_argument(
    '-e', '--edit', action='store_true',
    help="Open the file in $EDITOR. (Useful with an alias!)")
parser.add_argument(
    '-a', '--all', action='store_true',
    help="Show all events.")
parser.add_argument(
    '-n', '--number', default=5, type=int,
    help="Number of dates to display.")
parser.add_argument(
    '-c', '--categories', action='store_true',
    help="Sort countdowns by category, then countdown.")
parser.add_argument(
    '-p', '--past', nargs='?', default=0, const=None, type=int, metavar='DAYS',
    help="Number of days in the past to display. Provide no number to show all past events.")
parser.add_argument(
    '--no-rich', action='store_true',
    help="Do not display color or styling.")
parser.add_argument(
    '-d', '--days-until', metavar='NAME',
    help="Display days until a named event, rather than a list. Exits with code 9 if event not found.")


if __name__ == '__main__':
    args = parser.parse_args()
    if args.all:
        args.number = None
    
    if args.no_rich:
        Console = None
    
    if args.edit:
        system(f'$EDITOR "{args.file}"')

    _print = print
    def print(*objects):
        if Console is None:
            _print(*objects)
        else:
            Console().print(*objects, highlight=False)

    today = Date.today()
    events = get_events(args.file)

    if args.past is not None:
        minim = -args.past - 1
        events = filter(lambda x: (x.date - today).days > minim, events)
    
    if not args.days_until:
        events = sorted(events, key=lambda x: x.date)[:args.number]

    if args.days_until is not None:
        for e in events:
            if e.name == args.days_until:
                print(e.days_until())
                break
        else:
            exit(9)


    elif args.categories:
        cats: dict[Category, list[Event]] = dict()
        for e in events:
            cats.setdefault(e.category, [])
            cats[e.category].append(e)

        for c, es in cats.items():
            print(c)
            for e in es:
                print(e)

    else:
        for e in events:
            print(e)
